/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface NesbuttonComponent {
        "fileInput"?: boolean;
        "is"?: "primary" | "success" | "warning" | "error" | "disabled";
        "text"?: string;
    }
    interface NescheckboxComponent {
        "checked"?: boolean;
        "isDark"?: boolean;
        "label"?: string;
    }
    interface NescontainerComponent {
        "containerStyle"?: string;
        "isCentered"?: boolean;
        "isDark"?: boolean;
        "isRounded"?: boolean;
        "titleText"?: string;
    }
    interface NesdialogComponent {
        "closeDialog": () => Promise<void>;
        "isDark"?: boolean;
        "isRounded"?: boolean;
        "openDialog": () => Promise<void>;
        "options"?: string;
        "titleText"?: string;
    }
    interface NesdialogbtnComponent {
        "closeDialog": () => Promise<void>;
        "dialogId"?: string;
        "is"?: string;
        "openDialog": () => Promise<void>;
        "text"?: string;
        "toggleFn"?: string;
    }
    interface NesinputComponent {
        "fieldType"?: "name" | "inline" | "warning" | "error" | "dark";
        "inline"?: boolean;
        "label"?: string;
        "placeholder"?: string;
        "status"?: "green" | "yellow" | "red" | "black";
    }
    interface NeslistComponent {
        "isDark"?: boolean;
        "isFilled"?: boolean;
    }
    interface NesradioComponent {
        "isDark"?: boolean;
        "label"?: string;
        "name": string;
        "value": string;
    }
    interface NesselectComponent {
        "attrs"?: string;
        "fieldType"?: 'default' | 'success' | 'warning' | 'error' | 'dark';
        "label"?: string;
        "options"?: string;
    }
    interface NestableComponent {
        "headers": string;
        "isBordered"?: boolean;
        "isCentered"?: boolean;
        "isDark"?: boolean;
        "rows": string;
    }
    interface NestablepieceComponent {
        "element": 'th' | 'td';
        "isBordered"?: boolean;
        "isCentered"?: boolean;
        "isDark"?: boolean;
        "text": string;
    }
    interface NestextComponent {
        "element"?: keyof HTMLElementTagNameMap;
        "is"?: 'primary' | 'success' | 'warning' | 'error' | 'disabled';
        "options"?: string;
        "text": string;
    }
    interface NestextareaComponent {
        "label": string;
    }
    interface TablepieceComponent {
    }
}
export interface NescontainerComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNescontainerComponentElement;
}
declare global {
    interface HTMLNesbuttonComponentElement extends Components.NesbuttonComponent, HTMLStencilElement {
    }
    var HTMLNesbuttonComponentElement: {
        prototype: HTMLNesbuttonComponentElement;
        new (): HTMLNesbuttonComponentElement;
    };
    interface HTMLNescheckboxComponentElement extends Components.NescheckboxComponent, HTMLStencilElement {
    }
    var HTMLNescheckboxComponentElement: {
        prototype: HTMLNescheckboxComponentElement;
        new (): HTMLNescheckboxComponentElement;
    };
    interface HTMLNescontainerComponentElement extends Components.NescontainerComponent, HTMLStencilElement {
    }
    var HTMLNescontainerComponentElement: {
        prototype: HTMLNescontainerComponentElement;
        new (): HTMLNescontainerComponentElement;
    };
    interface HTMLNesdialogComponentElement extends Components.NesdialogComponent, HTMLStencilElement {
    }
    var HTMLNesdialogComponentElement: {
        prototype: HTMLNesdialogComponentElement;
        new (): HTMLNesdialogComponentElement;
    };
    interface HTMLNesdialogbtnComponentElement extends Components.NesdialogbtnComponent, HTMLStencilElement {
    }
    var HTMLNesdialogbtnComponentElement: {
        prototype: HTMLNesdialogbtnComponentElement;
        new (): HTMLNesdialogbtnComponentElement;
    };
    interface HTMLNesinputComponentElement extends Components.NesinputComponent, HTMLStencilElement {
    }
    var HTMLNesinputComponentElement: {
        prototype: HTMLNesinputComponentElement;
        new (): HTMLNesinputComponentElement;
    };
    interface HTMLNeslistComponentElement extends Components.NeslistComponent, HTMLStencilElement {
    }
    var HTMLNeslistComponentElement: {
        prototype: HTMLNeslistComponentElement;
        new (): HTMLNeslistComponentElement;
    };
    interface HTMLNesradioComponentElement extends Components.NesradioComponent, HTMLStencilElement {
    }
    var HTMLNesradioComponentElement: {
        prototype: HTMLNesradioComponentElement;
        new (): HTMLNesradioComponentElement;
    };
    interface HTMLNesselectComponentElement extends Components.NesselectComponent, HTMLStencilElement {
    }
    var HTMLNesselectComponentElement: {
        prototype: HTMLNesselectComponentElement;
        new (): HTMLNesselectComponentElement;
    };
    interface HTMLNestableComponentElement extends Components.NestableComponent, HTMLStencilElement {
    }
    var HTMLNestableComponentElement: {
        prototype: HTMLNestableComponentElement;
        new (): HTMLNestableComponentElement;
    };
    interface HTMLNestablepieceComponentElement extends Components.NestablepieceComponent, HTMLStencilElement {
    }
    var HTMLNestablepieceComponentElement: {
        prototype: HTMLNestablepieceComponentElement;
        new (): HTMLNestablepieceComponentElement;
    };
    interface HTMLNestextComponentElement extends Components.NestextComponent, HTMLStencilElement {
    }
    var HTMLNestextComponentElement: {
        prototype: HTMLNestextComponentElement;
        new (): HTMLNestextComponentElement;
    };
    interface HTMLNestextareaComponentElement extends Components.NestextareaComponent, HTMLStencilElement {
    }
    var HTMLNestextareaComponentElement: {
        prototype: HTMLNestextareaComponentElement;
        new (): HTMLNestextareaComponentElement;
    };
    interface HTMLTablepieceComponentElement extends Components.TablepieceComponent, HTMLStencilElement {
    }
    var HTMLTablepieceComponentElement: {
        prototype: HTMLTablepieceComponentElement;
        new (): HTMLTablepieceComponentElement;
    };
    interface HTMLElementTagNameMap {
        "nesbutton-component": HTMLNesbuttonComponentElement;
        "nescheckbox-component": HTMLNescheckboxComponentElement;
        "nescontainer-component": HTMLNescontainerComponentElement;
        "nesdialog-component": HTMLNesdialogComponentElement;
        "nesdialogbtn-component": HTMLNesdialogbtnComponentElement;
        "nesinput-component": HTMLNesinputComponentElement;
        "neslist-component": HTMLNeslistComponentElement;
        "nesradio-component": HTMLNesradioComponentElement;
        "nesselect-component": HTMLNesselectComponentElement;
        "nestable-component": HTMLNestableComponentElement;
        "nestablepiece-component": HTMLNestablepieceComponentElement;
        "nestext-component": HTMLNestextComponentElement;
        "nestextarea-component": HTMLNestextareaComponentElement;
        "tablepiece-component": HTMLTablepieceComponentElement;
    }
}
declare namespace LocalJSX {
    interface NesbuttonComponent {
        "fileInput"?: boolean;
        "is"?: "primary" | "success" | "warning" | "error" | "disabled";
        "text"?: string;
    }
    interface NescheckboxComponent {
        "checked"?: boolean;
        "isDark"?: boolean;
        "label"?: string;
    }
    interface NescontainerComponent {
        "containerStyle"?: string;
        "isCentered"?: boolean;
        "isDark"?: boolean;
        "isRounded"?: boolean;
        "onDarkThemeChange"?: (event: NescontainerComponentCustomEvent<Boolean>) => void;
        "titleText"?: string;
    }
    interface NesdialogComponent {
        "isDark"?: boolean;
        "isRounded"?: boolean;
        "options"?: string;
        "titleText"?: string;
    }
    interface NesdialogbtnComponent {
        "dialogId"?: string;
        "is"?: string;
        "text"?: string;
        "toggleFn"?: string;
    }
    interface NesinputComponent {
        "fieldType"?: "name" | "inline" | "warning" | "error" | "dark";
        "inline"?: boolean;
        "label"?: string;
        "placeholder"?: string;
        "status"?: "green" | "yellow" | "red" | "black";
    }
    interface NeslistComponent {
        "isDark"?: boolean;
        "isFilled"?: boolean;
    }
    interface NesradioComponent {
        "isDark"?: boolean;
        "label"?: string;
        "name"?: string;
        "value"?: string;
    }
    interface NesselectComponent {
        "attrs"?: string;
        "fieldType"?: 'default' | 'success' | 'warning' | 'error' | 'dark';
        "label"?: string;
        "options"?: string;
    }
    interface NestableComponent {
        "headers"?: string;
        "isBordered"?: boolean;
        "isCentered"?: boolean;
        "isDark"?: boolean;
        "rows"?: string;
    }
    interface NestablepieceComponent {
        "element"?: 'th' | 'td';
        "isBordered"?: boolean;
        "isCentered"?: boolean;
        "isDark"?: boolean;
        "text"?: string;
    }
    interface NestextComponent {
        "element"?: keyof HTMLElementTagNameMap;
        "is"?: 'primary' | 'success' | 'warning' | 'error' | 'disabled';
        "options"?: string;
        "text"?: string;
    }
    interface NestextareaComponent {
        "label"?: string;
    }
    interface TablepieceComponent {
    }
    interface IntrinsicElements {
        "nesbutton-component": NesbuttonComponent;
        "nescheckbox-component": NescheckboxComponent;
        "nescontainer-component": NescontainerComponent;
        "nesdialog-component": NesdialogComponent;
        "nesdialogbtn-component": NesdialogbtnComponent;
        "nesinput-component": NesinputComponent;
        "neslist-component": NeslistComponent;
        "nesradio-component": NesradioComponent;
        "nesselect-component": NesselectComponent;
        "nestable-component": NestableComponent;
        "nestablepiece-component": NestablepieceComponent;
        "nestext-component": NestextComponent;
        "nestextarea-component": NestextareaComponent;
        "tablepiece-component": TablepieceComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "nesbutton-component": LocalJSX.NesbuttonComponent & JSXBase.HTMLAttributes<HTMLNesbuttonComponentElement>;
            "nescheckbox-component": LocalJSX.NescheckboxComponent & JSXBase.HTMLAttributes<HTMLNescheckboxComponentElement>;
            "nescontainer-component": LocalJSX.NescontainerComponent & JSXBase.HTMLAttributes<HTMLNescontainerComponentElement>;
            "nesdialog-component": LocalJSX.NesdialogComponent & JSXBase.HTMLAttributes<HTMLNesdialogComponentElement>;
            "nesdialogbtn-component": LocalJSX.NesdialogbtnComponent & JSXBase.HTMLAttributes<HTMLNesdialogbtnComponentElement>;
            "nesinput-component": LocalJSX.NesinputComponent & JSXBase.HTMLAttributes<HTMLNesinputComponentElement>;
            "neslist-component": LocalJSX.NeslistComponent & JSXBase.HTMLAttributes<HTMLNeslistComponentElement>;
            "nesradio-component": LocalJSX.NesradioComponent & JSXBase.HTMLAttributes<HTMLNesradioComponentElement>;
            "nesselect-component": LocalJSX.NesselectComponent & JSXBase.HTMLAttributes<HTMLNesselectComponentElement>;
            "nestable-component": LocalJSX.NestableComponent & JSXBase.HTMLAttributes<HTMLNestableComponentElement>;
            "nestablepiece-component": LocalJSX.NestablepieceComponent & JSXBase.HTMLAttributes<HTMLNestablepieceComponentElement>;
            "nestext-component": LocalJSX.NestextComponent & JSXBase.HTMLAttributes<HTMLNestextComponentElement>;
            "nestextarea-component": LocalJSX.NestextareaComponent & JSXBase.HTMLAttributes<HTMLNestextareaComponentElement>;
            "tablepiece-component": LocalJSX.TablepieceComponent & JSXBase.HTMLAttributes<HTMLTablepieceComponentElement>;
        }
    }
}
